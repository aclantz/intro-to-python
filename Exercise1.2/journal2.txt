Exercise 1.2: Data Types in Python
Learning Goals

- Explain variables and data types in Python
- Summarize the use of objects in Python
- Create a data structure for your Recipe app

Reflection Questions

1. Imagine you’re having a conversation with a future colleague about whether to use the iPython Shell instead of Python’s default shell.
What reasons would you give to explain the benefits of using the iPython Shell over the default one?

	In my experience ipython shell is much more user friendly. It automates a lot of simple features like indenting and colored text for
   variables for easier readability

2. Python has a host of different data types that allow you to store and organize information. List 4 examples of data types that Python
recognizes, briefly define them, and indicate whether they are scalar or non-scalar.

    tuples       -  an immutable collection of values        -  non-scalar
    Lists        -  a mutable collection of values           -  non-scalar
    Dictionaries -  a mutable collection of key:value pairs  -  non-scalar
    integer      -  a variable that represents a number      -  scalar

3. A frequent question at job interviews for Python developers is: what is the difference between lists and tuples in Python? Write down
how you would respond.

	Lists are tuples that allow you to change and adapt the values stored. 

4. In the task for this Exercise, you decided what you thought was the most suitable data structure for storing all the information for a
recipe. Now, imagine you’re creating a language-learning app that helps users memorize vocabulary through flashcards. Users can input
vocabulary words, definitions, and their category (noun, verb, etc.) into the flashcards. They can then quiz themselves by flipping
through the flashcards. Think about the necessary data types and what would be the most suitable data structure for this language-learning
app. Between tuples, lists, and dictionaries, which would you choose? Think about their respective advantages and limitations, and where
flexibility might be useful if you were to continue developing the language-learning app beyond vocabulary memorization. 

	I would use Lists, this would allow for adjustments, unlike tuples,  in the values stored by the user but would be more sequential than dictionaries. 
