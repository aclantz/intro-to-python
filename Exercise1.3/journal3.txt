Exercise 1.3: Functions and Other Operations in Python
Learning Goals

- Implement conditional statements in Python to determine program flow
- Use loops to reduce time and effort in Python programming
- Write functions to organize Python code

Reflection Questions

1. In this Exercise, you learned how to use if-elif-else statements to run different tasks based on conditions that you define.
Now practice that skill by writing a script for a simple travel app using an if-elif-else statement for the following situation: 
The script should ask the user where they want to travel. 
  - The user’s input should be checked for 3 different travel destinations that you define. 
  - If the user’s input is one of those 3 destinations, the following statement should be printed: “Enjoy your stay in ______!”
  - If the user’s input is something other than the defined destinations, the following statement should be printed: “Oops, that 
    destination is not currently available.”

      ```
      destinations = [Berlin, Providence, Chicago]

      user_destination = input("Where would you like to travel to?")

      if user_destination in destinations:
          print("Enjoy your stay in str(user_destination)!")
      else:
          print("Destination is currently unavailable")
      ```

2. Imagine you’re at a job interview for a Python developer role. The interviewer says “Explain logical operators in Python”.
 Draft how you would respond.

	Logical operators are operators like “and”, “or”, and “not”. Unlike usual operators these are comparing two values and to 
  come to a true or false boolean value. The exception is the “not” operator that instead reverses the outcome of an operator.

3. What are functions in Python? When and why are they useful?

	Functions are a collection of code that are implemented when the function is called. This allows the developer to create a 
  possibly more complex series of instructions that can then be called when needed, instead of written all the time. Functions 
  also allow for local variables that are closed off from the rest of the file/code.

4. In the section for Exercise 1 in this Learning Journal, you were asked in question 3 to set some goals for yourself while you 
complete this course.  In preparation for your next mentor call, make some notes on how you’ve progressed towards your goals so far.

	My goals include:
	- Become comfortable using REPL
	- Become more aware of difference between Javascript and python
	- Someday build a backend with Python

	I would say the first two goals are coming along very nicely. I feel more comfortable using REPL and have found it a convent way 
  to test my code. I am also finding that the differences between Javascript and Python are small issues of syntax, which is not what I 
  expected. I thought it would be more complicated. Maybe that is to come. 


